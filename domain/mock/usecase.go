// Code generated by MockGen. DO NOT EDIT.
// Source: playground/domain (interfaces: EntryUsecase,TransferUsecase,UserUsecase,WalletUsecase)

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	context "context"
	domain "playground/domain"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockEntryUsecase is a mock of EntryUsecase interface.
type MockEntryUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockEntryUsecaseMockRecorder
}

// MockEntryUsecaseMockRecorder is the mock recorder for MockEntryUsecase.
type MockEntryUsecaseMockRecorder struct {
	mock *MockEntryUsecase
}

// NewMockEntryUsecase creates a new mock instance.
func NewMockEntryUsecase(ctrl *gomock.Controller) *MockEntryUsecase {
	mock := &MockEntryUsecase{ctrl: ctrl}
	mock.recorder = &MockEntryUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEntryUsecase) EXPECT() *MockEntryUsecaseMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockEntryUsecase) List(arg0 context.Context, arg1 domain.ListEntriesInputParams) ([]domain.Entry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]domain.Entry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockEntryUsecaseMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockEntryUsecase)(nil).List), arg0, arg1)
}

// MockTransferUsecase is a mock of TransferUsecase interface.
type MockTransferUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockTransferUsecaseMockRecorder
}

// MockTransferUsecaseMockRecorder is the mock recorder for MockTransferUsecase.
type MockTransferUsecaseMockRecorder struct {
	mock *MockTransferUsecase
}

// NewMockTransferUsecase creates a new mock instance.
func NewMockTransferUsecase(ctrl *gomock.Controller) *MockTransferUsecase {
	mock := &MockTransferUsecase{ctrl: ctrl}
	mock.recorder = &MockTransferUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransferUsecase) EXPECT() *MockTransferUsecaseMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTransferUsecase) Create(arg0 context.Context, arg1 domain.CreateTransferInputParams) (*domain.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*domain.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockTransferUsecaseMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTransferUsecase)(nil).Create), arg0, arg1)
}

// MockUserUsecase is a mock of UserUsecase interface.
type MockUserUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUserUsecaseMockRecorder
}

// MockUserUsecaseMockRecorder is the mock recorder for MockUserUsecase.
type MockUserUsecaseMockRecorder struct {
	mock *MockUserUsecase
}

// NewMockUserUsecase creates a new mock instance.
func NewMockUserUsecase(ctrl *gomock.Controller) *MockUserUsecase {
	mock := &MockUserUsecase{ctrl: ctrl}
	mock.recorder = &MockUserUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserUsecase) EXPECT() *MockUserUsecaseMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserUsecase) Create(arg0 context.Context, arg1 domain.CreateUserInputParams) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUserUsecaseMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserUsecase)(nil).Create), arg0, arg1)
}

// GetByUsername mocks base method.
func (m *MockUserUsecase) GetByUsername(arg0 context.Context, arg1 string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUsername", arg0, arg1)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUsername indicates an expected call of GetByUsername.
func (mr *MockUserUsecaseMockRecorder) GetByUsername(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUsername", reflect.TypeOf((*MockUserUsecase)(nil).GetByUsername), arg0, arg1)
}

// Login mocks base method.
func (m *MockUserUsecase) Login(arg0 context.Context, arg1 domain.LoginUserInputParams) (*domain.LoginUserOutputParams, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0, arg1)
	ret0, _ := ret[0].(*domain.LoginUserOutputParams)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockUserUsecaseMockRecorder) Login(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUserUsecase)(nil).Login), arg0, arg1)
}

// RenewAccessToken mocks base method.
func (m *MockUserUsecase) RenewAccessToken(arg0 context.Context, arg1 string) (*domain.RenewAccessTokenOutputParams, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenewAccessToken", arg0, arg1)
	ret0, _ := ret[0].(*domain.RenewAccessTokenOutputParams)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenewAccessToken indicates an expected call of RenewAccessToken.
func (mr *MockUserUsecaseMockRecorder) RenewAccessToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenewAccessToken", reflect.TypeOf((*MockUserUsecase)(nil).RenewAccessToken), arg0, arg1)
}

// MockWalletUsecase is a mock of WalletUsecase interface.
type MockWalletUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockWalletUsecaseMockRecorder
}

// MockWalletUsecaseMockRecorder is the mock recorder for MockWalletUsecase.
type MockWalletUsecaseMockRecorder struct {
	mock *MockWalletUsecase
}

// NewMockWalletUsecase creates a new mock instance.
func NewMockWalletUsecase(ctrl *gomock.Controller) *MockWalletUsecase {
	mock := &MockWalletUsecase{ctrl: ctrl}
	mock.recorder = &MockWalletUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWalletUsecase) EXPECT() *MockWalletUsecaseMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockWalletUsecase) Create(arg0 context.Context, arg1 domain.CreateWalletInputParams) (*domain.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*domain.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockWalletUsecaseMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockWalletUsecase)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockWalletUsecase) Delete(arg0 context.Context, arg1 domain.GetOrDeleteWalletInputParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockWalletUsecaseMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockWalletUsecase)(nil).Delete), arg0, arg1)
}

// Get mocks base method.
func (m *MockWalletUsecase) Get(arg0 context.Context, arg1 domain.GetOrDeleteWalletInputParams) (*domain.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*domain.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockWalletUsecaseMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockWalletUsecase)(nil).Get), arg0, arg1)
}

// List mocks base method.
func (m *MockWalletUsecase) List(arg0 context.Context, arg1 domain.ListWalletsInputParams) ([]domain.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]domain.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockWalletUsecaseMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockWalletUsecase)(nil).List), arg0, arg1)
}
