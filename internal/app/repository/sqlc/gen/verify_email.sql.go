// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: verify_email.sql

package gen

import (
	"context"
)

const createVerifyEmail = `-- name: CreateVerifyEmail :execlastid
INSERT INTO verify_emails (
    username,
    email,
    secret_code
) VALUES (
    ?, ?, ?
)
`

type CreateVerifyEmailParams struct {
	Username   string `json:"username"`
	Email      string `json:"email"`
	SecretCode string `json:"secret_code"`
}

func (q *Queries) CreateVerifyEmail(ctx context.Context, arg *CreateVerifyEmailParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, createVerifyEmail, arg.Username, arg.Email, arg.SecretCode)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const getVerifyEmail = `-- name: GetVerifyEmail :one
SELECT id, username, email, secret_code, is_used, expired_at, created_at FROM verify_emails
WHERE id = ? LIMIT 1
`

func (q *Queries) GetVerifyEmail(ctx context.Context, id int64) (*VerifyEmail, error) {
	row := q.db.QueryRowContext(ctx, getVerifyEmail, id)
	var i VerifyEmail
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.SecretCode,
		&i.IsUsed,
		&i.ExpiredAt,
		&i.CreatedAt,
	)
	return &i, err
}

const updateVerifyEmail = `-- name: UpdateVerifyEmail :exec
UPDATE verify_emails
SET
    is_used = 1
WHERE
    id = ?
    AND secret_code = ?
    AND is_used = 0
`

type UpdateVerifyEmailParams struct {
	ID         int64  `json:"id"`
	SecretCode string `json:"secret_code"`
}

func (q *Queries) UpdateVerifyEmail(ctx context.Context, arg *UpdateVerifyEmailParams) error {
	_, err := q.db.ExecContext(ctx, updateVerifyEmail, arg.ID, arg.SecretCode)
	return err
}
