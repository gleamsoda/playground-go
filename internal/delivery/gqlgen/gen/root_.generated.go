// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gen

import (
	"bytes"
	"context"
	"errors"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		schema:     cfg.Schema,
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Schema     *ast.Schema
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Mutation() MutationResolver
	Query() QueryResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	Account struct {
		Balance   func(childComplexity int) int
		CreatedAt func(childComplexity int) int
		Currency  func(childComplexity int) int
		ID        func(childComplexity int) int
		Owner     func(childComplexity int) int
	}

	LoginUserResponse struct {
		AccessToken           func(childComplexity int) int
		AccessTokenExpiresAt  func(childComplexity int) int
		RefreshToken          func(childComplexity int) int
		RefreshTokenExpiresAt func(childComplexity int) int
		SessionID             func(childComplexity int) int
		User                  func(childComplexity int) int
	}

	Mutation struct {
		CreateAccount func(childComplexity int, input NewAccount) int
		CreateUser    func(childComplexity int, input NewUser) int
		LoginUser     func(childComplexity int, input LoginUser) int
	}

	Query struct {
		Accounts func(childComplexity int, limit int, offset int) int
	}

	User struct {
		CreatedAt       func(childComplexity int) int
		Email           func(childComplexity int) int
		Fullname        func(childComplexity int) int
		IsEmailVerified func(childComplexity int) int
		Username        func(childComplexity int) int
	}
}

type executableSchema struct {
	schema     *ast.Schema
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	if e.schema != nil {
		return e.schema
	}
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e, 0, 0, nil}
	_ = ec
	switch typeName + "." + field {

	case "Account.balance":
		if e.complexity.Account.Balance == nil {
			break
		}

		return e.complexity.Account.Balance(childComplexity), true

	case "Account.createdAt":
		if e.complexity.Account.CreatedAt == nil {
			break
		}

		return e.complexity.Account.CreatedAt(childComplexity), true

	case "Account.currency":
		if e.complexity.Account.Currency == nil {
			break
		}

		return e.complexity.Account.Currency(childComplexity), true

	case "Account.id":
		if e.complexity.Account.ID == nil {
			break
		}

		return e.complexity.Account.ID(childComplexity), true

	case "Account.owner":
		if e.complexity.Account.Owner == nil {
			break
		}

		return e.complexity.Account.Owner(childComplexity), true

	case "LoginUserResponse.accessToken":
		if e.complexity.LoginUserResponse.AccessToken == nil {
			break
		}

		return e.complexity.LoginUserResponse.AccessToken(childComplexity), true

	case "LoginUserResponse.accessTokenExpiresAt":
		if e.complexity.LoginUserResponse.AccessTokenExpiresAt == nil {
			break
		}

		return e.complexity.LoginUserResponse.AccessTokenExpiresAt(childComplexity), true

	case "LoginUserResponse.refreshToken":
		if e.complexity.LoginUserResponse.RefreshToken == nil {
			break
		}

		return e.complexity.LoginUserResponse.RefreshToken(childComplexity), true

	case "LoginUserResponse.refreshTokenExpiresAt":
		if e.complexity.LoginUserResponse.RefreshTokenExpiresAt == nil {
			break
		}

		return e.complexity.LoginUserResponse.RefreshTokenExpiresAt(childComplexity), true

	case "LoginUserResponse.sessionId":
		if e.complexity.LoginUserResponse.SessionID == nil {
			break
		}

		return e.complexity.LoginUserResponse.SessionID(childComplexity), true

	case "LoginUserResponse.user":
		if e.complexity.LoginUserResponse.User == nil {
			break
		}

		return e.complexity.LoginUserResponse.User(childComplexity), true

	case "Mutation.createAccount":
		if e.complexity.Mutation.CreateAccount == nil {
			break
		}

		args, err := ec.field_Mutation_createAccount_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateAccount(childComplexity, args["input"].(NewAccount)), true

	case "Mutation.createUser":
		if e.complexity.Mutation.CreateUser == nil {
			break
		}

		args, err := ec.field_Mutation_createUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateUser(childComplexity, args["input"].(NewUser)), true

	case "Mutation.loginUser":
		if e.complexity.Mutation.LoginUser == nil {
			break
		}

		args, err := ec.field_Mutation_loginUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.LoginUser(childComplexity, args["input"].(LoginUser)), true

	case "Query.accounts":
		if e.complexity.Query.Accounts == nil {
			break
		}

		args, err := ec.field_Query_accounts_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Accounts(childComplexity, args["limit"].(int), args["offset"].(int)), true

	case "User.createdAt":
		if e.complexity.User.CreatedAt == nil {
			break
		}

		return e.complexity.User.CreatedAt(childComplexity), true

	case "User.email":
		if e.complexity.User.Email == nil {
			break
		}

		return e.complexity.User.Email(childComplexity), true

	case "User.fullname":
		if e.complexity.User.Fullname == nil {
			break
		}

		return e.complexity.User.Fullname(childComplexity), true

	case "User.isEmailVerified":
		if e.complexity.User.IsEmailVerified == nil {
			break
		}

		return e.complexity.User.IsEmailVerified(childComplexity), true

	case "User.username":
		if e.complexity.User.Username == nil {
			break
		}

		return e.complexity.User.Username(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e, 0, 0, make(chan graphql.DeferredResult)}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap(
		ec.unmarshalInputLoginUser,
		ec.unmarshalInputNewAccount,
		ec.unmarshalInputNewUser,
	)
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			var response graphql.Response
			var data graphql.Marshaler
			if first {
				first = false
				ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
				data = ec._Query(ctx, rc.Operation.SelectionSet)
			} else {
				if atomic.LoadInt32(&ec.pendingDeferred) > 0 {
					result := <-ec.deferredResults
					atomic.AddInt32(&ec.pendingDeferred, -1)
					data = result.Result
					response.Path = result.Path
					response.Label = result.Label
					response.Errors = result.Errors
				} else {
					return nil
				}
			}
			var buf bytes.Buffer
			data.MarshalGQL(&buf)
			response.Data = buf.Bytes()
			if atomic.LoadInt32(&ec.deferred) > 0 {
				hasNext := atomic.LoadInt32(&ec.pendingDeferred) > 0
				response.HasNext = &hasNext
			}

			return &response
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
	deferred        int32
	pendingDeferred int32
	deferredResults chan graphql.DeferredResult
}

func (ec *executionContext) processDeferredGroup(dg graphql.DeferredGroup) {
	atomic.AddInt32(&ec.pendingDeferred, 1)
	go func() {
		ctx := graphql.WithFreshResponseContext(dg.Context)
		dg.FieldSet.Dispatch(ctx)
		ds := graphql.DeferredResult{
			Path:   dg.Path,
			Label:  dg.Label,
			Result: dg.FieldSet,
			Errors: graphql.GetErrors(ctx),
		}
		// null fields should bubble up
		if dg.FieldSet.Invalids > 0 {
			ds.Result = graphql.Null
		}
		ec.deferredResults <- ds
	}()
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(ec.Schema()), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(ec.Schema(), ec.Schema().Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "../schema/schema.graphqls", Input: `# GraphQL schema example
#
# https://gqlgen.com/getting-started/
scalar Time

type User {
  username: String!
  fullname: String!
  email: String!
  createdAt: Time!
  isEmailVerified: Boolean!
}

type Account {
  id: Int!
  owner: String!
  balance: Int!
  currency: String!
  createdAt: Time!
}

type LoginUserResponse {
  user: User!
  sessionId: String!
  accessToken: String!
  refreshToken: String!
  accessTokenExpiresAt: Time!
  refreshTokenExpiresAt: Time!
}

type Query {
  accounts(limit: Int!, offset: Int!): [Account!]!
}

input NewUser {
  username: String!
  fullname: String!
  email: String!
  password: String!
}

input LoginUser {
  username: String!
  password: String!
}

input NewAccount {
  currency: String!
}

type Mutation {
  createUser(input: NewUser!): User!
  loginUser(input: LoginUser!): LoginUserResponse!
  createAccount(input: NewAccount!): Account!
}
`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)
