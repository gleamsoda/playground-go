// Code generated by MockGen. DO NOT EDIT.
// Source: account.go

// Package mock_app is a generated GoMock package.
package mock_app

import (
	context "context"
	app "playground/internal/app"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCreateAccountUsecase is a mock of CreateAccountUsecase interface.
type MockCreateAccountUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockCreateAccountUsecaseMockRecorder
}

// MockCreateAccountUsecaseMockRecorder is the mock recorder for MockCreateAccountUsecase.
type MockCreateAccountUsecaseMockRecorder struct {
	mock *MockCreateAccountUsecase
}

// NewMockCreateAccountUsecase creates a new mock instance.
func NewMockCreateAccountUsecase(ctrl *gomock.Controller) *MockCreateAccountUsecase {
	mock := &MockCreateAccountUsecase{ctrl: ctrl}
	mock.recorder = &MockCreateAccountUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCreateAccountUsecase) EXPECT() *MockCreateAccountUsecaseMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockCreateAccountUsecase) Execute(ctx context.Context, args *app.CreateAccountParams) (*app.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, args)
	ret0, _ := ret[0].(*app.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockCreateAccountUsecaseMockRecorder) Execute(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockCreateAccountUsecase)(nil).Execute), ctx, args)
}

// MockGetAccountUsecase is a mock of GetAccountUsecase interface.
type MockGetAccountUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockGetAccountUsecaseMockRecorder
}

// MockGetAccountUsecaseMockRecorder is the mock recorder for MockGetAccountUsecase.
type MockGetAccountUsecaseMockRecorder struct {
	mock *MockGetAccountUsecase
}

// NewMockGetAccountUsecase creates a new mock instance.
func NewMockGetAccountUsecase(ctrl *gomock.Controller) *MockGetAccountUsecase {
	mock := &MockGetAccountUsecase{ctrl: ctrl}
	mock.recorder = &MockGetAccountUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetAccountUsecase) EXPECT() *MockGetAccountUsecaseMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockGetAccountUsecase) Execute(ctx context.Context, args *app.GetAccountsParams) (*app.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, args)
	ret0, _ := ret[0].(*app.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockGetAccountUsecaseMockRecorder) Execute(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockGetAccountUsecase)(nil).Execute), ctx, args)
}

// MockListAccountsUsecase is a mock of ListAccountsUsecase interface.
type MockListAccountsUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockListAccountsUsecaseMockRecorder
}

// MockListAccountsUsecaseMockRecorder is the mock recorder for MockListAccountsUsecase.
type MockListAccountsUsecaseMockRecorder struct {
	mock *MockListAccountsUsecase
}

// NewMockListAccountsUsecase creates a new mock instance.
func NewMockListAccountsUsecase(ctrl *gomock.Controller) *MockListAccountsUsecase {
	mock := &MockListAccountsUsecase{ctrl: ctrl}
	mock.recorder = &MockListAccountsUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockListAccountsUsecase) EXPECT() *MockListAccountsUsecaseMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockListAccountsUsecase) Execute(ctx context.Context, args *app.ListAccountsParams) ([]app.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, args)
	ret0, _ := ret[0].([]app.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockListAccountsUsecaseMockRecorder) Execute(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockListAccountsUsecase)(nil).Execute), ctx, args)
}
