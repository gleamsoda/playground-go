// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mock_app is a generated GoMock package.
package mock_app

import (
	context "context"
	app "playground/internal/app"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRepositoryManager is a mock of RepositoryManager interface.
type MockRepositoryManager struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryManagerMockRecorder
}

// MockRepositoryManagerMockRecorder is the mock recorder for MockRepositoryManager.
type MockRepositoryManagerMockRecorder struct {
	mock *MockRepositoryManager
}

// NewMockRepositoryManager creates a new mock instance.
func NewMockRepositoryManager(ctrl *gomock.Controller) *MockRepositoryManager {
	mock := &MockRepositoryManager{ctrl: ctrl}
	mock.recorder = &MockRepositoryManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryManager) EXPECT() *MockRepositoryManagerMockRecorder {
	return m.recorder
}

// Account mocks base method.
func (m *MockRepositoryManager) Account() app.AccountRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Account")
	ret0, _ := ret[0].(app.AccountRepository)
	return ret0
}

// Account indicates an expected call of Account.
func (mr *MockRepositoryManagerMockRecorder) Account() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Account", reflect.TypeOf((*MockRepositoryManager)(nil).Account))
}

// Transaction mocks base method.
func (m *MockRepositoryManager) Transaction() app.Transaction {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transaction")
	ret0, _ := ret[0].(app.Transaction)
	return ret0
}

// Transaction indicates an expected call of Transaction.
func (mr *MockRepositoryManagerMockRecorder) Transaction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transaction", reflect.TypeOf((*MockRepositoryManager)(nil).Transaction))
}

// Transfer mocks base method.
func (m *MockRepositoryManager) Transfer() app.TransferRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transfer")
	ret0, _ := ret[0].(app.TransferRepository)
	return ret0
}

// Transfer indicates an expected call of Transfer.
func (mr *MockRepositoryManagerMockRecorder) Transfer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transfer", reflect.TypeOf((*MockRepositoryManager)(nil).Transfer))
}

// User mocks base method.
func (m *MockRepositoryManager) User() app.UserRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "User")
	ret0, _ := ret[0].(app.UserRepository)
	return ret0
}

// User indicates an expected call of User.
func (mr *MockRepositoryManagerMockRecorder) User() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "User", reflect.TypeOf((*MockRepositoryManager)(nil).User))
}

// MockTransaction is a mock of Transaction interface.
type MockTransaction struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionMockRecorder
}

// MockTransactionMockRecorder is the mock recorder for MockTransaction.
type MockTransactionMockRecorder struct {
	mock *MockTransaction
}

// NewMockTransaction creates a new mock instance.
func NewMockTransaction(ctrl *gomock.Controller) *MockTransaction {
	mock := &MockTransaction{ctrl: ctrl}
	mock.recorder = &MockTransactionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransaction) EXPECT() *MockTransactionMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockTransaction) Run(ctx context.Context, fn app.TransactionFunc) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", ctx, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockTransactionMockRecorder) Run(ctx, fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockTransaction)(nil).Run), ctx, fn)
}

// MockDispatcher is a mock of Dispatcher interface.
type MockDispatcher struct {
	ctrl     *gomock.Controller
	recorder *MockDispatcherMockRecorder
}

// MockDispatcherMockRecorder is the mock recorder for MockDispatcher.
type MockDispatcherMockRecorder struct {
	mock *MockDispatcher
}

// NewMockDispatcher creates a new mock instance.
func NewMockDispatcher(ctrl *gomock.Controller) *MockDispatcher {
	mock := &MockDispatcher{ctrl: ctrl}
	mock.recorder = &MockDispatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDispatcher) EXPECT() *MockDispatcherMockRecorder {
	return m.recorder
}

// SendVerifyEmail mocks base method.
func (m *MockDispatcher) SendVerifyEmail(ctx context.Context, payload *app.SendVerifyEmailPayload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendVerifyEmail", ctx, payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendVerifyEmail indicates an expected call of SendVerifyEmail.
func (mr *MockDispatcherMockRecorder) SendVerifyEmail(ctx, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendVerifyEmail", reflect.TypeOf((*MockDispatcher)(nil).SendVerifyEmail), ctx, payload)
}
