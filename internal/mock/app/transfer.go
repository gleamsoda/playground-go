// Code generated by MockGen. DO NOT EDIT.
// Source: transfer.go

// Package mock_app is a generated GoMock package.
package mock_app

import (
	context "context"
	app "playground/internal/app"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCreateTransferUsecase is a mock of CreateTransferUsecase interface.
type MockCreateTransferUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockCreateTransferUsecaseMockRecorder
}

// MockCreateTransferUsecaseMockRecorder is the mock recorder for MockCreateTransferUsecase.
type MockCreateTransferUsecaseMockRecorder struct {
	mock *MockCreateTransferUsecase
}

// NewMockCreateTransferUsecase creates a new mock instance.
func NewMockCreateTransferUsecase(ctrl *gomock.Controller) *MockCreateTransferUsecase {
	mock := &MockCreateTransferUsecase{ctrl: ctrl}
	mock.recorder = &MockCreateTransferUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCreateTransferUsecase) EXPECT() *MockCreateTransferUsecaseMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockCreateTransferUsecase) Execute(ctx context.Context, args *app.CreateTransferParams) (*app.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, args)
	ret0, _ := ret[0].(*app.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockCreateTransferUsecaseMockRecorder) Execute(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockCreateTransferUsecase)(nil).Execute), ctx, args)
}
