// Code generated by MockGen. DO NOT EDIT.
// Source: user.go

// Package mock_app is a generated GoMock package.
package mock_app

import (
	context "context"
	app "playground/internal/app"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCreateUserUsecase is a mock of CreateUserUsecase interface.
type MockCreateUserUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockCreateUserUsecaseMockRecorder
}

// MockCreateUserUsecaseMockRecorder is the mock recorder for MockCreateUserUsecase.
type MockCreateUserUsecaseMockRecorder struct {
	mock *MockCreateUserUsecase
}

// NewMockCreateUserUsecase creates a new mock instance.
func NewMockCreateUserUsecase(ctrl *gomock.Controller) *MockCreateUserUsecase {
	mock := &MockCreateUserUsecase{ctrl: ctrl}
	mock.recorder = &MockCreateUserUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCreateUserUsecase) EXPECT() *MockCreateUserUsecaseMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockCreateUserUsecase) Execute(ctx context.Context, args *app.CreateUserParams) (*app.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, args)
	ret0, _ := ret[0].(*app.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockCreateUserUsecaseMockRecorder) Execute(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockCreateUserUsecase)(nil).Execute), ctx, args)
}

// MockLoginUserUsecase is a mock of LoginUserUsecase interface.
type MockLoginUserUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockLoginUserUsecaseMockRecorder
}

// MockLoginUserUsecaseMockRecorder is the mock recorder for MockLoginUserUsecase.
type MockLoginUserUsecaseMockRecorder struct {
	mock *MockLoginUserUsecase
}

// NewMockLoginUserUsecase creates a new mock instance.
func NewMockLoginUserUsecase(ctrl *gomock.Controller) *MockLoginUserUsecase {
	mock := &MockLoginUserUsecase{ctrl: ctrl}
	mock.recorder = &MockLoginUserUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoginUserUsecase) EXPECT() *MockLoginUserUsecaseMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockLoginUserUsecase) Execute(ctx context.Context, args *app.LoginUserParams) (*app.LoginUserOutputParams, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, args)
	ret0, _ := ret[0].(*app.LoginUserOutputParams)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockLoginUserUsecaseMockRecorder) Execute(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockLoginUserUsecase)(nil).Execute), ctx, args)
}

// MockRenewAccessTokenUsecase is a mock of RenewAccessTokenUsecase interface.
type MockRenewAccessTokenUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockRenewAccessTokenUsecaseMockRecorder
}

// MockRenewAccessTokenUsecaseMockRecorder is the mock recorder for MockRenewAccessTokenUsecase.
type MockRenewAccessTokenUsecaseMockRecorder struct {
	mock *MockRenewAccessTokenUsecase
}

// NewMockRenewAccessTokenUsecase creates a new mock instance.
func NewMockRenewAccessTokenUsecase(ctrl *gomock.Controller) *MockRenewAccessTokenUsecase {
	mock := &MockRenewAccessTokenUsecase{ctrl: ctrl}
	mock.recorder = &MockRenewAccessTokenUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRenewAccessTokenUsecase) EXPECT() *MockRenewAccessTokenUsecaseMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockRenewAccessTokenUsecase) Execute(ctx context.Context, refreshToken string) (*app.RenewAccessTokenOutputParams, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, refreshToken)
	ret0, _ := ret[0].(*app.RenewAccessTokenOutputParams)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockRenewAccessTokenUsecaseMockRecorder) Execute(ctx, refreshToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockRenewAccessTokenUsecase)(nil).Execute), ctx, refreshToken)
}

// MockUpdateUserUsecase is a mock of UpdateUserUsecase interface.
type MockUpdateUserUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUpdateUserUsecaseMockRecorder
}

// MockUpdateUserUsecaseMockRecorder is the mock recorder for MockUpdateUserUsecase.
type MockUpdateUserUsecaseMockRecorder struct {
	mock *MockUpdateUserUsecase
}

// NewMockUpdateUserUsecase creates a new mock instance.
func NewMockUpdateUserUsecase(ctrl *gomock.Controller) *MockUpdateUserUsecase {
	mock := &MockUpdateUserUsecase{ctrl: ctrl}
	mock.recorder = &MockUpdateUserUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpdateUserUsecase) EXPECT() *MockUpdateUserUsecaseMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockUpdateUserUsecase) Execute(ctx context.Context, args *app.UpdateUserParams) (*app.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, args)
	ret0, _ := ret[0].(*app.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockUpdateUserUsecaseMockRecorder) Execute(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockUpdateUserUsecase)(nil).Execute), ctx, args)
}
