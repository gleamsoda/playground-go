// Code generated by MockGen. DO NOT EDIT.
// Source: verify_email.go

// Package mock_app is a generated GoMock package.
package mock_app

import (
	context "context"
	app "playground/internal/app"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockSendVerifyEmailUsecase is a mock of SendVerifyEmailUsecase interface.
type MockSendVerifyEmailUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockSendVerifyEmailUsecaseMockRecorder
}

// MockSendVerifyEmailUsecaseMockRecorder is the mock recorder for MockSendVerifyEmailUsecase.
type MockSendVerifyEmailUsecaseMockRecorder struct {
	mock *MockSendVerifyEmailUsecase
}

// NewMockSendVerifyEmailUsecase creates a new mock instance.
func NewMockSendVerifyEmailUsecase(ctrl *gomock.Controller) *MockSendVerifyEmailUsecase {
	mock := &MockSendVerifyEmailUsecase{ctrl: ctrl}
	mock.recorder = &MockSendVerifyEmailUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSendVerifyEmailUsecase) EXPECT() *MockSendVerifyEmailUsecaseMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockSendVerifyEmailUsecase) Execute(ctx context.Context, args *app.SendVerifyEmailPayload) (*app.VerifyEmail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, args)
	ret0, _ := ret[0].(*app.VerifyEmail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockSendVerifyEmailUsecaseMockRecorder) Execute(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockSendVerifyEmailUsecase)(nil).Execute), ctx, args)
}

// MockVerifyEmailUsecase is a mock of VerifyEmailUsecase interface.
type MockVerifyEmailUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockVerifyEmailUsecaseMockRecorder
}

// MockVerifyEmailUsecaseMockRecorder is the mock recorder for MockVerifyEmailUsecase.
type MockVerifyEmailUsecaseMockRecorder struct {
	mock *MockVerifyEmailUsecase
}

// NewMockVerifyEmailUsecase creates a new mock instance.
func NewMockVerifyEmailUsecase(ctrl *gomock.Controller) *MockVerifyEmailUsecase {
	mock := &MockVerifyEmailUsecase{ctrl: ctrl}
	mock.recorder = &MockVerifyEmailUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVerifyEmailUsecase) EXPECT() *MockVerifyEmailUsecaseMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockVerifyEmailUsecase) Execute(ctx context.Context, args *app.VerifyEmailParams) (*app.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, args)
	ret0, _ := ret[0].(*app.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockVerifyEmailUsecaseMockRecorder) Execute(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockVerifyEmailUsecase)(nil).Execute), ctx, args)
}
