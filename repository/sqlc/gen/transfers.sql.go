// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: transfers.sql

package gen

import (
	"context"
)

const createTransfer = `-- name: CreateTransfer :execlastid
INSERT INTO transfers (
  from_wallet_id,
  to_wallet_id,
  amount
) VALUES (
  ?, ?, ?
)
`

type CreateTransferParams struct {
	FromWalletID int64 `json:"from_wallet_id"`
	ToWalletID   int64 `json:"to_wallet_id"`
	Amount       int64 `json:"amount"`
}

func (q *Queries) CreateTransfer(ctx context.Context, arg CreateTransferParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, createTransfer, arg.FromWalletID, arg.ToWalletID, arg.Amount)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const getTransfer = `-- name: GetTransfer :one
SELECT id, from_wallet_id, to_wallet_id, amount, created_at FROM transfers
WHERE id = ? LIMIT 1
`

func (q *Queries) GetTransfer(ctx context.Context, id int64) (*Transfer, error) {
	row := q.db.QueryRowContext(ctx, getTransfer, id)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.FromWalletID,
		&i.ToWalletID,
		&i.Amount,
		&i.CreatedAt,
	)
	return &i, err
}
