// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: users.sql

package gen

import (
	"context"
)

const createUser = `-- name: CreateUser :execlastid
INSERT INTO users (
  username,
  full_name,
  email,
  hashed_password
) VALUES (
  ?, ?, ?, ?
)
`

type CreateUserParams struct {
	Username       string `json:"username"`
	FullName       string `json:"full_name"`
	Email          string `json:"email"`
	HashedPassword string `json:"hashed_password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, createUser,
		arg.Username,
		arg.FullName,
		arg.Email,
		arg.HashedPassword,
	)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, full_name, email, hashed_password, created_at FROM users
WHERE username = ? LIMIT 1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (*User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.FullName,
		&i.Email,
		&i.HashedPassword,
		&i.CreatedAt,
	)
	return &i, err
}
