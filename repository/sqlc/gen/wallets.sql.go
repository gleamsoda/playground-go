// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: wallets.sql

package gen

import (
	"context"
)

const addWalletBalance = `-- name: AddWalletBalance :exec
UPDATE wallets
SET balance = balance + ?
WHERE id = ?
`

type AddWalletBalanceParams struct {
	Amount int64 `json:"amount"`
	ID     int64 `json:"id"`
}

func (q *Queries) AddWalletBalance(ctx context.Context, arg AddWalletBalanceParams) error {
	_, err := q.db.ExecContext(ctx, addWalletBalance, arg.Amount, arg.ID)
	return err
}

const createWallet = `-- name: CreateWallet :execlastid
INSERT INTO wallets (
  user_id,
  balance,
  currency
) VALUES (
  ?, ?, ?
)
`

type CreateWalletParams struct {
	UserID   int64  `json:"user_id"`
	Balance  int64  `json:"balance"`
	Currency string `json:"currency"`
}

func (q *Queries) CreateWallet(ctx context.Context, arg CreateWalletParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, createWallet, arg.UserID, arg.Balance, arg.Currency)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const deleteWallet = `-- name: DeleteWallet :exec
DELETE FROM wallets
WHERE id = ?
`

func (q *Queries) DeleteWallet(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteWallet, id)
	return err
}

const getWallet = `-- name: GetWallet :one
SELECT id, user_id, balance, currency, created_at FROM wallets
WHERE id = ? LIMIT 1
`

func (q *Queries) GetWallet(ctx context.Context, id int64) (*Wallet, error) {
	row := q.db.QueryRowContext(ctx, getWallet, id)
	var i Wallet
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
	)
	return &i, err
}

const listWallets = `-- name: ListWallets :many
SELECT id, user_id, balance, currency, created_at FROM wallets
WHERE user_id = ?
ORDER BY id
LIMIT ?
OFFSET ?
`

type ListWalletsParams struct {
	UserID int64 `json:"user_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListWallets(ctx context.Context, arg ListWalletsParams) ([]*Wallet, error) {
	rows, err := q.db.QueryContext(ctx, listWallets, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Wallet{}
	for rows.Next() {
		var i Wallet
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Balance,
			&i.Currency,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
