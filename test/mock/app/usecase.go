// Code generated by MockGen. DO NOT EDIT.
// Source: playground/app (interfaces: Usecase)

// Package mock_app is a generated GoMock package.
package mock_app

import (
	context "context"
	app "playground/app"
	mq "playground/app/mq"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockUsecase is a mock of Usecase interface.
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase.
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance.
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// CreateAccount mocks base method.
func (m *MockUsecase) CreateAccount(arg0 context.Context, arg1 *app.CreateAccountParams) (*app.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", arg0, arg1)
	ret0, _ := ret[0].(*app.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockUsecaseMockRecorder) CreateAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockUsecase)(nil).CreateAccount), arg0, arg1)
}

// CreateTransfer mocks base method.
func (m *MockUsecase) CreateTransfer(arg0 context.Context, arg1 *app.CreateTransferParams) (*app.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransfer", arg0, arg1)
	ret0, _ := ret[0].(*app.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransfer indicates an expected call of CreateTransfer.
func (mr *MockUsecaseMockRecorder) CreateTransfer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransfer", reflect.TypeOf((*MockUsecase)(nil).CreateTransfer), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockUsecase) CreateUser(arg0 context.Context, arg1 *app.CreateUserParams) (*app.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(*app.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUsecaseMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUsecase)(nil).CreateUser), arg0, arg1)
}

// GetAccount mocks base method.
func (m *MockUsecase) GetAccount(arg0 context.Context, arg1 *app.GetAccountsParams) (*app.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", arg0, arg1)
	ret0, _ := ret[0].(*app.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockUsecaseMockRecorder) GetAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockUsecase)(nil).GetAccount), arg0, arg1)
}

// ListAccounts mocks base method.
func (m *MockUsecase) ListAccounts(arg0 context.Context, arg1 *app.ListAccountsParams) ([]app.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccounts", arg0, arg1)
	ret0, _ := ret[0].([]app.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccounts indicates an expected call of ListAccounts.
func (mr *MockUsecaseMockRecorder) ListAccounts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccounts", reflect.TypeOf((*MockUsecase)(nil).ListAccounts), arg0, arg1)
}

// LoginUser mocks base method.
func (m *MockUsecase) LoginUser(arg0 context.Context, arg1 *app.LoginUserParams) (*app.LoginUserOutputParams, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginUser", arg0, arg1)
	ret0, _ := ret[0].(*app.LoginUserOutputParams)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginUser indicates an expected call of LoginUser.
func (mr *MockUsecaseMockRecorder) LoginUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginUser", reflect.TypeOf((*MockUsecase)(nil).LoginUser), arg0, arg1)
}

// RenewAccessToken mocks base method.
func (m *MockUsecase) RenewAccessToken(arg0 context.Context, arg1 string) (*app.RenewAccessTokenOutputParams, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenewAccessToken", arg0, arg1)
	ret0, _ := ret[0].(*app.RenewAccessTokenOutputParams)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenewAccessToken indicates an expected call of RenewAccessToken.
func (mr *MockUsecaseMockRecorder) RenewAccessToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenewAccessToken", reflect.TypeOf((*MockUsecase)(nil).RenewAccessToken), arg0, arg1)
}

// SendVerifyEmail mocks base method.
func (m *MockUsecase) SendVerifyEmail(arg0 context.Context, arg1 *mq.SendVerifyEmailPayload) (*app.VerifyEmail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendVerifyEmail", arg0, arg1)
	ret0, _ := ret[0].(*app.VerifyEmail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendVerifyEmail indicates an expected call of SendVerifyEmail.
func (mr *MockUsecaseMockRecorder) SendVerifyEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendVerifyEmail", reflect.TypeOf((*MockUsecase)(nil).SendVerifyEmail), arg0, arg1)
}

// UpdateUser mocks base method.
func (m *MockUsecase) UpdateUser(arg0 context.Context, arg1 *app.UpdateUserParams) (*app.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(*app.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUsecaseMockRecorder) UpdateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUsecase)(nil).UpdateUser), arg0, arg1)
}

// VerifyEmail mocks base method.
func (m *MockUsecase) VerifyEmail(arg0 context.Context, arg1 *app.VerifyEmailParams) (*app.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyEmail", arg0, arg1)
	ret0, _ := ret[0].(*app.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyEmail indicates an expected call of VerifyEmail.
func (mr *MockUsecaseMockRecorder) VerifyEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyEmail", reflect.TypeOf((*MockUsecase)(nil).VerifyEmail), arg0, arg1)
}
