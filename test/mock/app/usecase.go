// Code generated by MockGen. DO NOT EDIT.
// Source: playground/app (interfaces: AccountUsecase,TransferUsecase,UserUsecase)

// Package mock_app is a generated GoMock package.
package mock_app

import (
	context "context"
	app "playground/app"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockAccountUsecase is a mock of AccountUsecase interface.
type MockAccountUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockAccountUsecaseMockRecorder
}

// MockAccountUsecaseMockRecorder is the mock recorder for MockAccountUsecase.
type MockAccountUsecaseMockRecorder struct {
	mock *MockAccountUsecase
}

// NewMockAccountUsecase creates a new mock instance.
func NewMockAccountUsecase(ctrl *gomock.Controller) *MockAccountUsecase {
	mock := &MockAccountUsecase{ctrl: ctrl}
	mock.recorder = &MockAccountUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountUsecase) EXPECT() *MockAccountUsecaseMockRecorder {
	return m.recorder
}

// CreateAccount mocks base method.
func (m *MockAccountUsecase) CreateAccount(arg0 context.Context, arg1 *app.CreateAccountParams) (*app.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", arg0, arg1)
	ret0, _ := ret[0].(*app.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockAccountUsecaseMockRecorder) CreateAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockAccountUsecase)(nil).CreateAccount), arg0, arg1)
}

// GetAccount mocks base method.
func (m *MockAccountUsecase) GetAccount(arg0 context.Context, arg1 int64) (*app.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", arg0, arg1)
	ret0, _ := ret[0].(*app.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockAccountUsecaseMockRecorder) GetAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockAccountUsecase)(nil).GetAccount), arg0, arg1)
}

// ListAccounts mocks base method.
func (m *MockAccountUsecase) ListAccounts(arg0 context.Context, arg1 *app.ListAccountsParams) ([]app.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccounts", arg0, arg1)
	ret0, _ := ret[0].([]app.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccounts indicates an expected call of ListAccounts.
func (mr *MockAccountUsecaseMockRecorder) ListAccounts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccounts", reflect.TypeOf((*MockAccountUsecase)(nil).ListAccounts), arg0, arg1)
}

// MockTransferUsecase is a mock of TransferUsecase interface.
type MockTransferUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockTransferUsecaseMockRecorder
}

// MockTransferUsecaseMockRecorder is the mock recorder for MockTransferUsecase.
type MockTransferUsecaseMockRecorder struct {
	mock *MockTransferUsecase
}

// NewMockTransferUsecase creates a new mock instance.
func NewMockTransferUsecase(ctrl *gomock.Controller) *MockTransferUsecase {
	mock := &MockTransferUsecase{ctrl: ctrl}
	mock.recorder = &MockTransferUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransferUsecase) EXPECT() *MockTransferUsecaseMockRecorder {
	return m.recorder
}

// CreateTransfer mocks base method.
func (m *MockTransferUsecase) CreateTransfer(arg0 context.Context, arg1 *app.CreateTransferParams) (*app.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransfer", arg0, arg1)
	ret0, _ := ret[0].(*app.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransfer indicates an expected call of CreateTransfer.
func (mr *MockTransferUsecaseMockRecorder) CreateTransfer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransfer", reflect.TypeOf((*MockTransferUsecase)(nil).CreateTransfer), arg0, arg1)
}

// MockUserUsecase is a mock of UserUsecase interface.
type MockUserUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUserUsecaseMockRecorder
}

// MockUserUsecaseMockRecorder is the mock recorder for MockUserUsecase.
type MockUserUsecaseMockRecorder struct {
	mock *MockUserUsecase
}

// NewMockUserUsecase creates a new mock instance.
func NewMockUserUsecase(ctrl *gomock.Controller) *MockUserUsecase {
	mock := &MockUserUsecase{ctrl: ctrl}
	mock.recorder = &MockUserUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserUsecase) EXPECT() *MockUserUsecaseMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserUsecase) CreateUser(arg0 context.Context, arg1 *app.CreateUserParams) (*app.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(*app.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserUsecaseMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserUsecase)(nil).CreateUser), arg0, arg1)
}

// Login mocks base method.
func (m *MockUserUsecase) Login(arg0 context.Context, arg1 *app.LoginUserParams) (*app.LoginUserOutputParams, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0, arg1)
	ret0, _ := ret[0].(*app.LoginUserOutputParams)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockUserUsecaseMockRecorder) Login(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUserUsecase)(nil).Login), arg0, arg1)
}

// RenewAccessToken mocks base method.
func (m *MockUserUsecase) RenewAccessToken(arg0 context.Context, arg1 string) (*app.RenewAccessTokenOutputParams, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenewAccessToken", arg0, arg1)
	ret0, _ := ret[0].(*app.RenewAccessTokenOutputParams)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenewAccessToken indicates an expected call of RenewAccessToken.
func (mr *MockUserUsecaseMockRecorder) RenewAccessToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenewAccessToken", reflect.TypeOf((*MockUserUsecase)(nil).RenewAccessToken), arg0, arg1)
}
