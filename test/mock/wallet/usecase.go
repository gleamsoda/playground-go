// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/wallet/usecase.go

// Package mock_wallet is a generated GoMock package.
package mock_wallet

import (
	context "context"
	wallet "playground/internal/wallet"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockUsecase is a mock of Usecase interface.
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase.
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance.
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// CreateAccount mocks base method.
func (m *MockUsecase) CreateAccount(ctx context.Context, args *wallet.CreateAccountParams) (*wallet.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", ctx, args)
	ret0, _ := ret[0].(*wallet.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockUsecaseMockRecorder) CreateAccount(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockUsecase)(nil).CreateAccount), ctx, args)
}

// CreateTransfer mocks base method.
func (m *MockUsecase) CreateTransfer(ctx context.Context, args *wallet.CreateTransferParams) (*wallet.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransfer", ctx, args)
	ret0, _ := ret[0].(*wallet.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransfer indicates an expected call of CreateTransfer.
func (mr *MockUsecaseMockRecorder) CreateTransfer(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransfer", reflect.TypeOf((*MockUsecase)(nil).CreateTransfer), ctx, args)
}

// CreateUser mocks base method.
func (m *MockUsecase) CreateUser(ctx context.Context, args *wallet.CreateUserParams) (*wallet.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, args)
	ret0, _ := ret[0].(*wallet.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUsecaseMockRecorder) CreateUser(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUsecase)(nil).CreateUser), ctx, args)
}

// GetAccount mocks base method.
func (m *MockUsecase) GetAccount(ctx context.Context, args *wallet.GetAccountsParams) (*wallet.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", ctx, args)
	ret0, _ := ret[0].(*wallet.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockUsecaseMockRecorder) GetAccount(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockUsecase)(nil).GetAccount), ctx, args)
}

// ListAccounts mocks base method.
func (m *MockUsecase) ListAccounts(ctx context.Context, args *wallet.ListAccountsParams) ([]wallet.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccounts", ctx, args)
	ret0, _ := ret[0].([]wallet.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccounts indicates an expected call of ListAccounts.
func (mr *MockUsecaseMockRecorder) ListAccounts(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccounts", reflect.TypeOf((*MockUsecase)(nil).ListAccounts), ctx, args)
}

// LoginUser mocks base method.
func (m *MockUsecase) LoginUser(ctx context.Context, args *wallet.LoginUserParams) (*wallet.LoginUserOutputParams, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginUser", ctx, args)
	ret0, _ := ret[0].(*wallet.LoginUserOutputParams)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginUser indicates an expected call of LoginUser.
func (mr *MockUsecaseMockRecorder) LoginUser(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginUser", reflect.TypeOf((*MockUsecase)(nil).LoginUser), ctx, args)
}

// RenewAccessToken mocks base method.
func (m *MockUsecase) RenewAccessToken(ctx context.Context, refreshToken string) (*wallet.RenewAccessTokenOutputParams, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenewAccessToken", ctx, refreshToken)
	ret0, _ := ret[0].(*wallet.RenewAccessTokenOutputParams)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenewAccessToken indicates an expected call of RenewAccessToken.
func (mr *MockUsecaseMockRecorder) RenewAccessToken(ctx, refreshToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenewAccessToken", reflect.TypeOf((*MockUsecase)(nil).RenewAccessToken), ctx, refreshToken)
}

// SendVerifyEmail mocks base method.
func (m *MockUsecase) SendVerifyEmail(ctx context.Context, args *wallet.SendVerifyEmailPayload) (*wallet.VerifyEmail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendVerifyEmail", ctx, args)
	ret0, _ := ret[0].(*wallet.VerifyEmail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendVerifyEmail indicates an expected call of SendVerifyEmail.
func (mr *MockUsecaseMockRecorder) SendVerifyEmail(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendVerifyEmail", reflect.TypeOf((*MockUsecase)(nil).SendVerifyEmail), ctx, args)
}

// UpdateUser mocks base method.
func (m *MockUsecase) UpdateUser(ctx context.Context, args *wallet.UpdateUserParams) (*wallet.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, args)
	ret0, _ := ret[0].(*wallet.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUsecaseMockRecorder) UpdateUser(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUsecase)(nil).UpdateUser), ctx, args)
}

// VerifyEmail mocks base method.
func (m *MockUsecase) VerifyEmail(ctx context.Context, args *wallet.VerifyEmailParams) (*wallet.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyEmail", ctx, args)
	ret0, _ := ret[0].(*wallet.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyEmail indicates an expected call of VerifyEmail.
func (mr *MockUsecaseMockRecorder) VerifyEmail(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyEmail", reflect.TypeOf((*MockUsecase)(nil).VerifyEmail), ctx, args)
}
